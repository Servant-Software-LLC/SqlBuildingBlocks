using SqlBuildingBlocks.LogicalEntities;
using System.Data;

namespace SqlBuildingBlocks.QueryProcessing;

internal class ProcessingState
{

    /// <summary>
    /// Table in the processing chain where the WHERE statement can be evaluated. (i.e. all of the columns referenced in the WHERE condition can have values to evaluate) 
    /// </summary>
    public SqlTable? WhereApplied { get; set; }

    /// <summary>
    /// Set of Tables in the FROM/JOIN chains that have or are int the process of being processed.
    /// </summary>
    public HashSet<SqlTable> TablesInProcessing = new();

    /// <summary>
    /// A Table keyed mapping of DataTables that only contain the columns which will be needed for this query.  It limits the amount
    /// of data to be generated by projecting only those columns into the DataRows.
    /// </summary>
    public Dictionary<SqlTable, DataTable> TablesProjections = new();

    public Dictionary<SqlTable, DataRow> DataRowsOfOtherTables = new();

    public DataTable QueryOutput = new();

    public bool CountAggregate { get; set; }
}
